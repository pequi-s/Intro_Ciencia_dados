# -*- coding: utf-8 -*-
"""Classificação_aves.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kxTsMEx2bvwJ6y9OvqTgwib4HS8dSyzF
"""

import pandas as pd

# Arquivos
arquivo_csv = 'AVONET.csv'
arquivo_species = 'Lista_species1.csv'

# Função para carregar arquivo com tratamento de erro
def carregar_arquivo(nome_arquivo):
    try:
        dados = pd.read_csv(nome_arquivo)
        print(f"Arquivo '{nome_arquivo}' carregado com sucesso!")
        return dados
    except FileNotFoundError:
        print(f"Erro: O arquivo '{nome_arquivo}' não foi encontrado.")
        exit()

# Carregar arquivos
dados = carregar_arquivo(arquivo_csv)
lista_species = carregar_arquivo(arquivo_species)

# Validar coluna 'Species1' no arquivo de espécies
if 'Species1' not in lista_species.columns:
    print("Erro: A coluna 'Species1' não foi encontrada no arquivo de espécies.")
    exit()

# Lista de espécies desejadas
species_desejados = lista_species['Species1'].tolist()

# Validar colunas desejadas no dataset principal
colunas_desejadas = [
    'Mass', 'Wing.Length', 'Tail.Length', 'Tarsus.Length',
    'Beak.Length_Culmen', 'Beak.Width', 'Trophic.Niche', 'Species1'
]
if not set(colunas_desejadas).issubset(dados.columns):
    print("Erro: Algumas colunas desejadas não foram encontradas no dataset principal.")
    exit()

# Filtrar dados
dados_filtrados_aves = dados[colunas_desejadas]
dados_filtrados_aves = dados_filtrados_aves[dados_filtrados_aves['Species1'].isin(species_desejados)]

# Exibir resultado
print("\nDados filtrados:")
print(dados_filtrados_aves)

### Agora vamos filtrar e colocar classes das aves

import pandas as pd

# Carregar os dados
df = pd.read_csv("dados_filtrados_aves.csv", sep=';')

# Renomear colunas para remover espaços em branco, caso existam
df.columns = df.columns.str.strip()

# Lista de variáveis desejadas
variaveis_desejadas = ['Mass', 'Wing.Length', 'Tail.Length', 'Tarsus.Length', 'Beak.Length_Culmen', 'Trophic.Niche']

# Filtrar para apenas colunas existentes
variaveis = [var for var in variaveis_desejadas if var in df.columns]

# Converter as colunas disponíveis para numérico, substituindo valores inválidos por NaN
for var in variaveis[:-1]:  # Ignorar 'Dieta' ao converter para numérico
    df[var] = pd.to_numeric(df[var], errors='coerce')

# Eliminar linhas com valores NaN nas variáveis selecionadas
df_valid = df.dropna(subset=variaveis)

# Calcular os quartis para bico e massa
quartis_bico = df_valid['Beak.Length_Culmen'].quantile([0.25, 0.5, 0.75])
quartis_peso = df_valid['Mass'].quantile([0.25, 0.5, 0.75])

# Função para classificar com base em bico, massa e dieta
def classificar_ave(row):
    if row['Trophic.Niche'] == 'Invertivore':
        if row['Beak.Length_Culmen'] > quartis_bico[0.5] and row['Mass'] > quartis_peso[0.5]:
            return 'Insetívoro Grande'
        elif row['Beak.Length_Culmen'] <= quartis_bico[0.5] and row['Mass'] <= quartis_peso[0.5]:
            return 'Insetívoro Pequeno'
    elif row['Trophic.Niche'] == 'Frugivore':
        if row['Beak.Length_Culmen'] > quartis_bico[0.5] and row['Mass'] > quartis_peso[0.5]:
            return 'Frugívoro Grande'
        elif row['Beak.Length_Culmen'] <= quartis_bico[0.5] and row['Mass'] <= quartis_peso[0.5]:
            return 'Frugívoro Pequeno'
    return 'Não Classificado'

# Aplicar a classificação ao DataFrame
df_valid['Classificação'] = df_valid.apply(classificar_ave, axis=1)

# Exibir as primeiras linhas com a classificação
print("\nDados com classificação adicionada:")
print(df_valid[['Species1', 'Mass', 'Beak.Length_Culmen', 'Trophic.Niche', 'Classificação']].head())

# Salvar o DataFrame com classificação para um arquivo CSV
df_valid.to_csv("dados_classificados_completos.csv", index=False)